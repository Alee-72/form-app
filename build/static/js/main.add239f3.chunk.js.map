{"version":3,"sources":["FormDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sleep","time","Promise","acc","setTimeout","FormDisplay","className","Card","CardContent","initialValues","name","fname","age","email","password","female","male","contact","description","onSubmit","values","a","alert","console","log","label","validationSchema","yup","required","min","Box","type","component","TextField","max","Label","CheckboxWithLabel","placeholder","FormikStep","children","FormikStepper","props","childrenArray","React","Children","toArray","useState","step","setstep","currentchildren","length","action","s","isSubmitting","autoComplete","Stepper","activeStep","alternativeLabel","map","child","Step","StepLabel","Button","disabled","variant","color","onClick","startIcon","CircularProgress","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.add239f3.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Step,\n  StepLabel,\n  Stepper,\n} from \"@material-ui/core\";\n\nimport { Field, Form, Formik, FormikConfig, FormikValues } from \"formik\";\nimport { TextField, CheckboxWithLabel } from \"formik-material-ui\";\nimport React, { useState } from \"react\";\n\nimport * as yup from \"yup\";\n\nconst sleep = (time: any) => new Promise((acc) => setTimeout(acc, time));\nexport const FormDisplay = () => {\n  return (\n    <div className=\"card\">\n      <Card>\n        <CardContent>\n          <FormikStepper\n            initialValues={{\n              name: \"\",\n              fname: \"\",\n              age: \"\",\n              email: \"\",\n              password: \"\",\n              female: false,\n              male: false,\n\n              contact: \"\",\n              description: \"\",\n            }}\n            onSubmit={async (values) => {\n              await sleep(3000);\n              alert(\"Form submitted\");\n              console.log(\"values\", values);\n            }}\n          >\n            <FormikStep\n              label=\"Account\"\n              validationSchema={yup.object({\n                email: yup.string().required().min(4, \"required\"),\n                password: yup\n                  .string()\n                  .required()\n                  .min(6, \"Atleast 6 digits are required\"),\n              })}\n            >\n              <Box>\n                <Field\n                  type=\"text\"\n                  label=\"Email\"\n                  name=\"email\"\n                  component={TextField}\n                />\n              </Box>\n              <Box>\n                <Field\n                  type=\"text\"\n                  label=\"Password\"\n                  name=\"password\"\n                  component={TextField}\n                />\n              </Box>\n            </FormikStep>\n\n            <FormikStep\n              label=\"Personal\"\n              validationSchema={yup.object({\n                name: yup.string().required().max(13, \"Not valid\"),\n                fname: yup.string().required().max(13, \"Not valid\"),\n                age: yup\n                  .number()\n                  .required()\n                  .min(18, \"Under 18 are not allowed\"),\n                contact: yup.number().required().min(11, \"Not valid\"),\n              })}\n            >\n              <Box>\n                <Field\n                  type=\"text\"\n                  label=\"Name\"\n                  name=\"name\"\n                  component={TextField}\n                />\n              </Box>\n              <Box>\n                {\" \"}\n                <Field\n                  type=\"text\"\n                  label=\"Father Name\"\n                  name=\"fname\"\n                  component={TextField}\n                />\n              </Box>\n              <Box>\n                <Field\n                  type=\"number\"\n                  label=\"Age\"\n                  name=\"age\"\n                  component={TextField}\n                />\n              </Box>\n              <Field\n                type=\"checkbox\"\n                Label={{ label: \"Female\" }}\n                name=\"female\"\n                component={CheckboxWithLabel}\n              />\n              <Field\n                type=\"checkbox\"\n                Label={{ label: \"Male\" }}\n                name=\"male\"\n                component={CheckboxWithLabel}\n              />\n              <Box>\n                <Field\n                  type=\"number\"\n                  label=\"Contact\"\n                  name=\"contact\"\n                  component={TextField}\n                />\n              </Box>\n            </FormikStep>\n\n            <FormikStep label=\"Description\">\n              <Box>\n                {\" \"}\n                <Field\n                  type=\"text\"\n                  placeholder=\"Tell About yourself\"\n                  label=\"Description\"\n                  name=\"description\"\n                  component={TextField}\n                />\n              </Box>\n            </FormikStep>\n          </FormikStepper>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport interface Proptypestep\n  extends Pick<FormikConfig<FormikValues>, \"children\" | \"validationSchema\"> {\n  label: string;\n}\n\nexport const FormikStep = ({ children }: Proptypestep) => {\n  return <>{children}</>;\n};\n\nexport const FormikStepper = ({\n  children,\n  ...props\n}: FormikConfig<FormikValues>) => {\n  const childrenArray = React.Children.toArray(\n    children\n  ) as React.ReactElement<Proptypestep>[];\n  const [step, setstep] = useState(0);\n  const currentchildren = childrenArray[step];\n  console.log(childrenArray.length - 1);\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentchildren.props.validationSchema}\n      onSubmit={async (values, action) => {\n        if (step === childrenArray.length - 1) {\n          await props.onSubmit(values, action);\n        } else {\n          setstep((s) => s + 1);\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper activeStep={step} alternativeLabel>\n            {childrenArray.map((child) => (\n              <Step key={child.props.label}>\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          {currentchildren}\n          <br />\n          <br />\n          {step > 0 ? (\n            <Button\n              disabled={isSubmitting}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => setstep((s) => s - 1)}\n            >\n              Back\n            </Button>\n          ) : null}\n          &nbsp; &nbsp;\n          <Button\n            disabled={isSubmitting}\n            startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n          >\n            {step == childrenArray.length - 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { FormDisplay } from \"./FormDisplay\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}