{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ali/React/my-app/src/FormDisplay.tsx\",\n    _s = $RefreshSig$();\n\n// import {\n//   Box,\n//   Button,\n//   Card,\n//   CardContent,\n//   CircularProgress,\n//   Step,\n//   StepLabel,\n//   Stepper,\n//   TextField,\n// } from \"@material-ui/core\";\n// import * as yup from 'yup';\n// import { Field, Form, Formik, FormikConfig, FormikValues } from \"formik\";\n// import { CheckboxWithLabel } from \"formik-material-ui\";\n// import React, { useState } from \"react\";\n// const sleep = (time: any) => new Promise((acc) => setTimeout(acc, time));\n// export const FormDisplay = () => {\n//   return (\n//     <div className=\"card\">\n//       <Card>\n//         <CardContent>\n//           <FormikStepper\n//             initialValues={{\n//               firstname: \"\",\n//               lastname: \"\",\n//               age: \"\",\n//               email: \"\",\n//               password: \"\",\n//               female: false,\n//               male: false,\n//               contact: \"\",\n//               description: \"\",\n//             }}\n//             onSubmit={async (values) => {\n//               await sleep(3000);\n//               alert(\"Form submitted\");\n//               console.log(\"values\", values);\n//             }}\n//           >\n//             <FormikStep \n//                  label=\"Personal\"\n//                  validationSchema={yup.object({\n//                   firstname: yup.string().required().max(13,'Not valid'),\n//                   lastname: yup.string().required().max(13,'Not valid'),\n//                   age: yup.number().required().min(18,'Under 18 are not allowed')\n//                 })}\n//             >\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"First Name\"\n//                   name=\"firstname\"\n//                   component={TextField}\n//                 />{\" \"}\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Last Name\"\n//                   name=\"lastname\"\n//                   component={TextField}\n//                 />{\" \"}\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"number\"\n//                   label=\"Age\"\n//                   name=\"age\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Field\n//                 type=\"checkbox\"\n//                 Label={{ label: \"Female\" }}\n//                 name=\"female\"\n//                 component={CheckboxWithLabel}\n//               /> \n//               <Field\n//                 type=\"checkbox\"\n//                 Label={{ label: \"Male\" }}\n//                 name=\"male\"\n//                 component={CheckboxWithLabel}\n//               />\n//             </FormikStep>\n//             <FormikStep label=\"Account\">\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Email\"\n//                   name=\"email\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Password\"\n//                   name=\"password\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//             </FormikStep>\n//             <FormikStep label=\"Description\">\n//               {\" \"}\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"number\"\n//                   label=\"Contact\"\n//                   name=\"contact\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Description\"\n//                   name=\"description\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//             </FormikStep>\n//           </FormikStepper>\n//         </CardContent>\n//       </Card>\n//     </div>\n//   );\n// };\n// export interface Proptypestep\n//   extends Pick<FormikConfig<FormikValues>, \"children\" | \"validationSchema\"> {\n//   label: string;\n// }\n// export const FormikStep = ({ children }: Proptypestep) => {\n//   return <>{children}</>;\n// };\n// export const FormikStepper = ({\n//   children,\n//   ...props\n// }: FormikConfig<FormikValues>) => {\n//   const childrenArray = React.Children.toArray(\n//     children\n//   ) as React.ReactElement<Proptypestep>[];\n//   const [step, setstep] = useState(0);\n//   const currentchildren = childrenArray[step];\n//   console.log(childrenArray.length - 1);\n//   return (\n//     <Formik\n//       {...props} \n//       validationSchema={currentchildren.props.validationSchema}\n//       onSubmit={async (values, action) => {\n//         if (step === childrenArray.length - 1) {\n//           return props.onSubmit(values, action);\n//         } else {\n//           setstep((s) => s + 1);\n//         }\n//       }}\n//     >\n//       {({ isSubmitting }) => (\n//         <Form autoComplete=\"off\">\n//           <Stepper activeStep={step} alternativeLabel>\n//             {childrenArray.map((child) => (\n//               <Step key={child.props.label}>\n//                 <StepLabel>{child.props.label}</StepLabel>\n//               </Step>\n//             ))}\n//           </Stepper>\n//           {currentchildren}\n//           <br />\n//           <br />\n//           {step > 0 ? (\n//             <Button\n//               disabled={isSubmitting}\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={() => setstep((s) => s - 1)}\n//             >\n//               Back\n//             </Button>\n//           ) : null}\n//           &nbsp; &nbsp;\n//           <Button\n//             disabled={isSubmitting}\n//             startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n//             variant=\"contained\"\n//             color=\"primary\"\n//             type=\"submit\"\n//           >\n//             {step == childrenArray.length - 1 ? \"Submit\" : \"Next\"}\n//           </Button>\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };\nimport React, { useState } from \"react\";\nimport { Box, Button, Card, CardContent, CircularProgress, Step, StepLabel, Stepper } from \"@material-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\nimport { CheckboxWithLabel, TextField } from \"formik-material-ui\";\nimport * as yup from 'yup';\nimport './App.css'; /// Time out Function\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nexport const FormDisplay = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"card\",\n      style: {\n        width: '75%'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        className: \"data\",\n        children: /*#__PURE__*/_jsxDEV(FormikStepper, {\n          initialValues: {\n            firstname: \"\",\n            lastname: \"\",\n            age: \"\",\n            email: \"\",\n            password: \"\",\n            accept: false,\n            money: 0,\n            description: \"\"\n          },\n          onSubmit: async values => {\n            await sleep(3000);\n            console.log(\"values\", values);\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormikStep, {\n            label: \"Personal\",\n            validationSchema: yup.object({\n              firstname: yup.string().required().max(13, 'Not valid'),\n              lastname: yup.string().required().max(13, 'Not valid'),\n              age: yup.number().required().min(18, 'Under 18 are not allowed')\n            }),\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                name: \"firstname\",\n                component: TextField,\n                label: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                name: \"lastname\",\n                type: \"text\",\n                component: TextField,\n                label: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                name: \"age\",\n                type: \"number\",\n                component: TextField,\n                label: \"Age\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n            label: \"Account\",\n            validationSchema: yup.object({\n              email: yup.string().email().required(),\n              password: yup.string().required().min(8, 'Must be 8  characters')\n            }),\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                label: \"Email\",\n                name: \"email\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                type: \"password\",\n                label: \"Password\",\n                name: \"password\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n            label: \"Financial\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                name: \"accept\",\n                component: CheckboxWithLabel,\n                type: \"checkbox\",\n                Label: {\n                  label: \"I am a millionare\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                name: \"money\",\n                type: \"number\",\n                label: \"Money\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                label: \"Desciption\",\n                name: \"description\",\n                component: TextField\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}; //type defined for each step in Form\n\n_c = FormDisplay;\n// A Single step in form that displays on browser\nexport const FormikStep = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}; //The whole Form that that displays in browser and convert into steps\n\n_c2 = FormikStep;\nexport const FormikStepper = ({\n  children,\n  ...props\n}) => {\n  _s();\n\n  const childrenArray = React.Children.toArray(children);\n  const [step, setstep] = useState(0);\n  const currentchildren = childrenArray[step];\n  console.log(childrenArray.length - 1);\n  return /*#__PURE__*/_jsxDEV(Formik, { ...props,\n    validationSchema: currentchildren.props.validationSchema,\n    onSubmit: async (values, action) => {\n      if (step === childrenArray.length - 1) {\n        await props.onSubmit(values, action);\n      } else {\n        setstep(s => s + 1);\n      }\n    },\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: step,\n        alternativeLabel: true,\n        children: childrenArray.map(child => /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: child.props.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)\n        }, child.props.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), currentchildren, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), step > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n        disabled: isSubmitting,\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setstep(s => s - 1),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }, this) : null, \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n        disabled: isSubmitting,\n        startIcon: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: \"1rem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 39\n        }, this) : null,\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: step === childrenArray.length - 1 ? \"Submit\" : \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormikStepper, \"GnRRDLy78TCsp4JROtVwfPInytE=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FormDisplay\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["/home/ali/React/my-app/src/FormDisplay.tsx"],"names":["React","useState","Box","Button","Card","CardContent","CircularProgress","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","yup","sleep","time","Promise","acc","setTimeout","FormDisplay","width","firstname","lastname","age","email","password","accept","money","description","values","console","log","object","string","required","max","number","min","label","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setstep","currentchildren","length","validationSchema","action","onSubmit","s","isSubmitting","map","child"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,WAA5B,EAAyCC,gBAAzC,EAA2DC,IAA3D,EAAiEC,SAAjE,EAA4EC,OAA5E,QAA2F,mBAA3F;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAgE,QAAhE;AACA,SAASC,iBAAT,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,WAAP,C,CACA;;AACA,MAAMC,KAAK,GAAIC,IAAD,IAAe,IAAIC,OAAJ,CAAaC,GAAD,IAASC,UAAU,CAACD,GAAD,EAAMF,IAAN,CAA/B,CAA7B;;AAGA,OAAO,MAAMI,WAAW,GAAG,MAAM;AAC/B,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAG;AAAT,OAA9B;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,MAAvB;AAAA,+BACE,QAAC,aAAD;AACE,UAAA,aAAa,EAAE;AACbC,YAAAA,SAAS,EAAE,EADE;AAEbC,YAAAA,QAAQ,EAAE,EAFG;AAGbC,YAAAA,GAAG,EAAE,EAHQ;AAIbC,YAAAA,KAAK,EAAE,EAJM;AAKbC,YAAAA,QAAQ,EAAE,EALG;AAMbC,YAAAA,MAAM,EAAE,KANK;AAObC,YAAAA,KAAK,EAAE,CAPM;AAQbC,YAAAA,WAAW,EAAE;AARA,WADjB;AAYE,UAAA,QAAQ,EAAE,MAAOC,MAAP,IAAkB;AAC1B,kBAAMf,KAAK,CAAC,IAAD,CAAX;AACAgB,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACD,WAfH;AAAA,kCAiBE,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,UAAlB;AACA,YAAA,gBAAgB,EAAEhB,GAAG,CAACmB,MAAJ,CAAW;AAC3BX,cAAAA,SAAS,EAAER,GAAG,CAACoB,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,EAA5B,EAA+B,WAA/B,CADgB;AAE3Bb,cAAAA,QAAQ,EAAET,GAAG,CAACoB,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,EAA5B,EAA+B,WAA/B,CAFiB;AAG3BZ,cAAAA,GAAG,EAAEV,GAAG,CAACuB,MAAJ,GAAaF,QAAb,GAAwBG,GAAxB,CAA4B,EAA5B,EAA+B,0BAA/B;AAHsB,aAAX,CADlB;AAAA,oCAOE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,MADF;AAEH,gBAAA,IAAI,EAAC,WAFF;AAGH,gBAAA,SAAS,EAAEzB,SAHR;AAIH,gBAAA,KAAK,EAAC;AAJH;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAPF,eAaE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,UADF;AAEH,gBAAA,IAAI,EAAC,MAFF;AAGH,gBAAA,SAAS,EAAEA,SAHR;AAIH,gBAAA,KAAK,EAAC;AAJH;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAbF,eAmBE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,KADF;AAEH,gBAAA,IAAI,EAAC,QAFF;AAGH,gBAAA,SAAS,EAAEA,SAHR;AAIH,gBAAA,KAAK,EAAC;AAJH;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBF,eA2CE,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,SAAlB;AACA,YAAA,gBAAgB,EAAEC,GAAG,CAACmB,MAAJ,CAAW;AAC3BR,cAAAA,KAAK,EAAEX,GAAG,CAACoB,MAAJ,GAAaT,KAAb,GAAqBU,QAArB,EADoB;AAE3BT,cAAAA,QAAQ,EAAEZ,GAAG,CAACoB,MAAJ,GAAaC,QAAb,GAAwBG,GAAxB,CAA4B,CAA5B,EAA8B,uBAA9B;AAFiB,aAAX,CADlB;AAAA,oCAOE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,MADF;AAEH,gBAAA,KAAK,EAAC,OAFH;AAGH,gBAAA,IAAI,EAAC,OAHF;AAIH,gBAAA,SAAS,EAAEzB;AAJR;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAPF,eAaE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,UADF;AAEH,gBAAA,KAAK,EAAC,UAFH;AAGH,gBAAA,IAAI,EAAC,UAHF;AAIH,gBAAA,SAAS,EAAEA;AAJR;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,kBA3CF,eA+DE,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,WAAlB;AAAA,oCAEE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,QADF;AAEH,gBAAA,SAAS,EAAED,iBAFR;AAGH,gBAAA,IAAI,EAAC,UAHF;AAIH,gBAAA,KAAK,EAAE;AAAE2B,kBAAAA,KAAK,EAAE;AAAT;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAFF,eAQE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,OADF;AAEH,gBAAA,IAAI,EAAC,QAFF;AAGH,gBAAA,KAAK,EAAC,OAHH;AAIH,gBAAA,SAAS,EAAE1B;AAJR;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBARF,eAcE,QAAC,GAAD;AAAA,qCAAK,QAAC,KAAD;AACH,gBAAA,IAAI,EAAC,MADF;AAEH,gBAAA,KAAK,EAAC,YAFH;AAGH,gBAAA,IAAI,EAAC,aAHF;AAIH,gBAAA,SAAS,EAAEA;AAJR;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,oBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/DF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6FD,CA9FM,C,CAgGP;;KAhGaO,W;AAsGX;AACF,OAAO,MAAMoB,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAC3D,sBAAO;AAAA,cAAGA;AAAH,mBAAP;AACD,CAFM,C,CAKP;;MALaD,U;AAMb,OAAO,MAAME,aAAa,GAAG,CAAC;AAC5BD,EAAAA,QAD4B;AAE5B,KAAGE;AAFyB,CAAD,KAGK;AAAA;;AAChC,QAAMC,aAAa,GAAG7C,KAAK,CAAC8C,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,CAAtB;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBhD,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMiD,eAAe,GAAGL,aAAa,CAACG,IAAD,CAArC;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAYY,aAAa,CAACM,MAAd,GAAuB,CAAnC;AACA,sBACE,QAAC,MAAD,OACMP,KADN;AAEE,IAAA,gBAAgB,EAAEM,eAAe,CAACN,KAAhB,CAAsBQ,gBAF1C;AAGE,IAAA,QAAQ,EAAE,OAAOrB,MAAP,EAAesB,MAAf,KAA0B;AAClC,UAAIL,IAAI,KAAKH,aAAa,CAACM,MAAd,GAAuB,CAApC,EAAuC;AACrC,cAAMP,KAAK,CAACU,QAAN,CAAevB,MAAf,EAAuBsB,MAAvB,CAAN;AACD,OAFD,MAEO;AACLJ,QAAAA,OAAO,CAAEM,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAP;AACD;AACF,KATH;AAAA,cAYG,CAAC;AAAEC,MAAAA;AAAF,KAAD,kBACC,QAAC,IAAD;AAAA,8BAEE,QAAC,OAAD;AAAS,QAAA,UAAU,EAAER,IAArB;AAA2B,QAAA,gBAAgB,MAA3C;AAAA,kBACDH,aAAa,CAACY,GAAd,CAAmBC,KAAD,iBACjB,QAAC,IAAD;AAAA,iCACE,QAAC,SAAD;AAAA,sBAAYA,KAAK,CAACd,KAAN,CAAYJ;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF,WAAWkB,KAAK,CAACd,KAAN,CAAYJ,KAAvB;AAAA;AAAA;AAAA;AAAA,gBADD;AADC;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGU,eAVH,eAWE;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AAAA;AAAA;AAAA;AAAA,cAZF,EAaGF,IAAI,GAAG,CAAP,gBACC,QAAC,MAAD;AACE,QAAA,QAAQ,EAAEQ,YADZ;AAEE,QAAA,OAAO,EAAC,WAFV;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,OAAO,EAAE,MAAMP,OAAO,CAAEM,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GASG,IAtBN,4BAwBE,QAAC,MAAD;AACE,QAAA,QAAQ,EAAEC,YADZ;AAEE,QAAA,SAAS,EAAEA,YAAY,gBAAG,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAsC,IAF/D;AAGE,QAAA,OAAO,EAAC,WAHV;AAIE,QAAA,KAAK,EAAC,SAJR;AAKE,QAAA,IAAI,EAAC,QALP;AAAA,kBAOGR,IAAI,KAAKH,aAAa,CAACM,MAAd,GAAuB,CAAhC,GAAoC,QAApC,GAA+C;AAPlD;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CA3DM;;GAAMR,a;;MAAAA,a","sourcesContent":["// import {\n//   Box,\n//   Button,\n//   Card,\n//   CardContent,\n//   CircularProgress,\n//   Step,\n//   StepLabel,\n//   Stepper,\n//   TextField,\n// } from \"@material-ui/core\";\n// import * as yup from 'yup';\n\n// import { Field, Form, Formik, FormikConfig, FormikValues } from \"formik\";\n// import { CheckboxWithLabel } from \"formik-material-ui\";\n// import React, { useState } from \"react\";\n// const sleep = (time: any) => new Promise((acc) => setTimeout(acc, time));\n// export const FormDisplay = () => {\n//   return (\n//     <div className=\"card\">\n//       <Card>\n//         <CardContent>\n//           <FormikStepper\n        \n\n//             initialValues={{\n//               firstname: \"\",\n//               lastname: \"\",\n//               age: \"\",\n//               email: \"\",\n//               password: \"\",\n//               female: false,\n//               male: false,\n\n//               contact: \"\",\n//               description: \"\",\n//             }}\n//             onSubmit={async (values) => {\n//               await sleep(3000);\n//               alert(\"Form submitted\");\n//               console.log(\"values\", values);\n//             }}\n//           >\n//             <FormikStep \n//                  label=\"Personal\"\n//                  validationSchema={yup.object({\n//                   firstname: yup.string().required().max(13,'Not valid'),\n//                   lastname: yup.string().required().max(13,'Not valid'),\n//                   age: yup.number().required().min(18,'Under 18 are not allowed')\n//                 })}\n            \n//             >\n       \n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"First Name\"\n//                   name=\"firstname\"\n//                   component={TextField}\n//                 />{\" \"}\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Last Name\"\n//                   name=\"lastname\"\n//                   component={TextField}\n//                 />{\" \"}\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"number\"\n//                   label=\"Age\"\n//                   name=\"age\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Field\n//                 type=\"checkbox\"\n//                 Label={{ label: \"Female\" }}\n//                 name=\"female\"\n//                 component={CheckboxWithLabel}\n//               /> \n//               <Field\n//                 type=\"checkbox\"\n//                 Label={{ label: \"Male\" }}\n//                 name=\"male\"\n//                 component={CheckboxWithLabel}\n//               />\n//             </FormikStep>\n//             <FormikStep label=\"Account\">\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Email\"\n//                   name=\"email\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Password\"\n//                   name=\"password\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//             </FormikStep>\n//             <FormikStep label=\"Description\">\n//               {\" \"}\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"number\"\n//                   label=\"Contact\"\n//                   name=\"contact\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//               <Box>\n//                 {\" \"}\n//                 <Field\n//                   type=\"text\"\n//                   label=\"Description\"\n//                   name=\"description\"\n//                   component={TextField}\n//                 />\n//               </Box>\n//             </FormikStep>\n//           </FormikStepper>\n//         </CardContent>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export interface Proptypestep\n//   extends Pick<FormikConfig<FormikValues>, \"children\" | \"validationSchema\"> {\n//   label: string;\n// }\n\n// export const FormikStep = ({ children }: Proptypestep) => {\n//   return <>{children}</>;\n// };\n\n// export const FormikStepper = ({\n//   children,\n//   ...props\n// }: FormikConfig<FormikValues>) => {\n//   const childrenArray = React.Children.toArray(\n//     children\n//   ) as React.ReactElement<Proptypestep>[];\n//   const [step, setstep] = useState(0);\n//   const currentchildren = childrenArray[step];\n//   console.log(childrenArray.length - 1);\n//   return (\n//     <Formik\n//       {...props} \n\n//       validationSchema={currentchildren.props.validationSchema}\n\n//       onSubmit={async (values, action) => {\n//         if (step === childrenArray.length - 1) {\n//           return props.onSubmit(values, action);\n//         } else {\n//           setstep((s) => s + 1);\n//         }\n//       }}\n//     >\n//       {({ isSubmitting }) => (\n//         <Form autoComplete=\"off\">\n//           <Stepper activeStep={step} alternativeLabel>\n//             {childrenArray.map((child) => (\n//               <Step key={child.props.label}>\n//                 <StepLabel>{child.props.label}</StepLabel>\n//               </Step>\n//             ))}\n//           </Stepper>\n//           {currentchildren}\n//           <br />\n//           <br />\n//           {step > 0 ? (\n//             <Button\n//               disabled={isSubmitting}\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={() => setstep((s) => s - 1)}\n//             >\n//               Back\n//             </Button>\n//           ) : null}\n//           &nbsp; &nbsp;\n//           <Button\n//             disabled={isSubmitting}\n//             startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n//             variant=\"contained\"\n//             color=\"primary\"\n//             type=\"submit\"\n//           >\n//             {step == childrenArray.length - 1 ? \"Submit\" : \"Next\"}\n//           </Button>\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };\n\nimport React, { useState } from \"react\";\nimport { Box, Button, Card, CardContent, CircularProgress, Step, StepLabel, Stepper } from \"@material-ui/core\";\nimport { Field, Form, Formik, FormikConfig, FormikValues } from \"formik\";\nimport { CheckboxWithLabel, TextField } from \"formik-material-ui\";\nimport * as yup from 'yup'\nimport './App.css'\n/// Time out Function\nconst sleep = (time: any) => new Promise((acc) => setTimeout(acc, time));\n\n\nexport const FormDisplay = () => {\n  return (\n    <div>\n      <Card className='card' style={{width : '75%'}}>\n        <CardContent className='data'>\n          <FormikStepper\n            initialValues={{\n              firstname: \"\",\n              lastname: \"\",\n              age: \"\",\n              email: \"\",\n              password: \"\",\n              accept: false,\n              money: 0,\n              description: \"\",\n            }}\n\n            onSubmit={async (values) => {\n              await sleep(3000);\n              console.log(\"values\", values);\n            }}\n          >\n            <FormikStep label='Personal' \n            validationSchema={yup.object({\n              firstname: yup.string().required().max(13,'Not valid'),\n              lastname: yup.string().required().max(13,'Not valid'),\n              age: yup.number().required().min(18,'Under 18 are not allowed')\n            })}\n            >\n              <Box><Field\n                type=\"text\"\n                name=\"firstname\"\n                component={TextField}\n                label=\"First Name\"\n              /></Box>\n              <Box><Field\n                name=\"lastname\"\n                type=\"text\"\n                component={TextField}\n                label=\"Last Name\"\n              /></Box>\n              <Box><Field\n                name=\"age\"\n                type=\"number\"\n                component={TextField}\n                label=\"Age\"\n              /></Box>\n            </FormikStep>\n            <FormikStep label='Account'\n            validationSchema={yup.object({\n              email: yup.string().email().required(),\n              password: yup.string().required().min(8,'Must be 8  characters'),\n\n            })}\n            >\n              <Box><Field\n                type=\"text\"\n                label=\"Email\"\n                name=\"email\"\n                component={TextField}\n              /></Box>\n              <Box><Field\n                type=\"password\"\n                label=\"Password\"\n                name=\"password\"\n                component={TextField}\n              /></Box>\n            </FormikStep>\n            <FormikStep label='Financial'\n            >\n              <Box><Field\n                name=\"accept\"\n                component={CheckboxWithLabel}\n                type=\"checkbox\"\n                Label={{ label: \"I am a millionare\" }}\n              /></Box>\n              <Box><Field\n                name=\"money\"\n                type=\"number\"\n                label=\"Money\"\n                component={TextField}\n              /></Box>\n              <Box><Field\n                type=\"text\"\n                label=\"Desciption\"\n                name=\"description\"\n                component={TextField}\n              /></Box>\n            </FormikStep>\n          </FormikStepper>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n//type defined for each step in Form\nexport interface FormikStepProps\n  extends Pick<FormikConfig<FormikValues>, \"children\" | \"validationSchema\"> {\n          label: string\n  }\n\n  // A Single step in form that displays on browser\nexport const FormikStep = ({ children }: FormikStepProps) => {\n  return <>{children}</>;\n};\n\n\n//The whole Form that that displays in browser and convert into steps\nexport const FormikStepper = ({\n  children,\n  ...props\n}: FormikConfig<FormikValues>) => {\n  const childrenArray = React.Children.toArray(children)  as React.ReactElement<FormikStepProps>[];\n  const [step, setstep] = useState(0);\n  const currentchildren = childrenArray[step];\n  console.log(childrenArray.length - 1);\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentchildren.props.validationSchema}\n      onSubmit={async (values, action) => {\n        if (step === childrenArray.length - 1) {\n          await props.onSubmit(values, action);\n        } else {\n          setstep((s) => s + 1);\n        }\n      }}\n    >\n      \n      {({ isSubmitting }) => (\n        <Form>\n          \n          <Stepper activeStep={step} alternativeLabel>\n        {childrenArray.map((child) => (\n          <Step key={child.props.label}>\n            <StepLabel>{child.props.label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n\n          {currentchildren}\n          <br />\n          <br />\n          {step > 0 ? (\n            <Button\n              disabled={isSubmitting}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => setstep((s) => s - 1)}\n            >\n              Back\n            </Button>\n          ) : null}\n          &nbsp; &nbsp;\n          <Button\n            disabled={isSubmitting}\n            startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n          >\n            {step === childrenArray.length - 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}